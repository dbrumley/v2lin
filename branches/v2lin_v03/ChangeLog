2000, 2001: Gary S. Robertson 
	* Initial implementation for MontaVista Software Inc. (http://legacy2linux.sourceforge.net/)

2004-09: Andrew Skiba, skibochka@sourceforge.net
	* Update of lkernelLib.c and ltaskLib.c
	* Added support of users' main() function, along with user_sysinit and user_syskill

2005-08: Mike Kemelmakher, mike@ubxess.com
	* Added globalLoad.* , global.g.* with test

2006: Constantine Shulyupin, conan.sh@gmail.com
	* All source is indented with indent to Linux kernel style
	* 'validate' renamed to test and divided to set of files and functions
	* lists are redesigned
	* Divided to lib, tests, samples directories
	* Added tracing and check macros (TRACEF, CHK, CHK0, etc )
	* Added implementations: tickGet tickSet from tickLib,  and sysClkRateGet from sysLib

2015: Dmitry Petrunin, dmitry_p@rad.com
The code was significantly modified and fixed since last "02" release.
Many function were modified and moved in files. The project is compilled 
and run. In few places we closed the code in "ifdef" and left it as we could not understand logic behind it.

###############
# New functions
###############

STATUS taskWait(int tid):
    v2lin wrapper for pthread_join()

int sysRealClkRateGet(void):
    - get real time clock rate

STATUS v2pt_sysClkRateSet(int ticksPerSecond):
    - set emulated clock rate (ticks per second) in v2pthread environment

STATUS v2pt_set_realtime_prio(pthread_t thread, int policy, int priority):
    - v2lin wrapper for setting scheduling parameters of a thread

# VxWorks event API implementation
# ================================
STATUS eventReceive(unsigned int events,
                    unsigned char flags,
                    int timeOut,
                    unsigned int * events_r);
STATUS eventSend(int taskId, unsigned long events);
STATUS eventClear(void);
STATUS msgQEvStart(MSG_Q_ID msgQId,
                   unsigned int events,
                   unsigned char options);
STATUS msgQEvStop(MSG_Q_ID msgQId);

# Inter-process communication via POSIX queues
# ============================================
extern MSG_Q_ID msgQOpen(const char * name,
                         int max_msgs,
                         int msglen, 
                         int opt,
                         int mode,
                         void * context); 
extern STATUS msgQClose(MSG_Q_ID msgQId );
extern STATUS msgQUnlink(const char * name );

####################
# Modified functions
####################

int msgQList(V2Lin_PrintCb_T printFunc_p, void *cookie, int mem);
int taskList(V2Lin_PrintCb_T printFunc_p, void *cookie, int mem);
int semList(V2Lin_PrintCb_T printFunc_p, void *cookie, int mem);
int taskShow(V2Lin_PrintCb_T printFunc_p, void *cookie);
int wdogShow(V2Lin_PrintCb_T printFunc_p, void *cookie);
int sysClkRateGet(void);

int exception_task(int dummy0, int dummy1, int dummy2, int dummy3,
                   int dummy4, int dummy5, int dummy6, int dummy7,
                   int dummy8, int dummy9):
    - improved precision with feedback mechanism
    - improved system up-time handling for the application

#######
# Fixes
#######
#define MIN_V2LIN_TASK_SIZE (1024 * 256) /* minimum 256k stack size for linux pthread */ 
- to prevent too small stack configuration. 

- Improved semaphores and queues handling, especially semaphore deadlocks
  prevention in heavy load stress tests
- Ensuring RT priorities for threads

